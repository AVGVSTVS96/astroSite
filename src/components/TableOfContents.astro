---
const { headings } = Astro.props;
const toc = buildToc(headings);
import TableOfContentsHeading from './TableOfContentsHeading.astro';

interface Heading {
  depth: number;
  subheadings: Heading[];
}

function buildToc(headings: Heading[]) {
  const toc: Heading[] = [];
  const parentHeadings = new Map<number, Heading>();
  headings.forEach((h: Heading) => {
    const heading: Heading = { ...h, subheadings: [] };
    parentHeadings.set(heading.depth, heading);
    // Change 2 to 1 if your markdown includes your <h1>
    if (heading.depth === 2) {
      toc.push(heading);
    } else {
      let parentHeading = parentHeadings.get(heading.depth - 1);
      if (parentHeading) {
        parentHeading.subheadings.push(heading);
      }
    }
  });
  return toc;
}
---

<nav
  class="toc prose sticky top-28 mt-28 w-[240px] text-[0.8em] leading-normal dark:prose-invert prose-a:text-muted-dark prose-a:transition-colors dark:prose-a:text-muted-light/60 sm:pl-2 md:pl-4 xl:pl-6">
  <ul class="grid list-none">
    {
      toc.map((heading) => (
        <TableOfContentsHeading
          class="toc-item my-[0.15rem]"
          heading={heading}
        />
      ))
    }
  </ul>
</nav>
<script>
  window.addEventListener('DOMContentLoaded', () => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const heading = entry.target.querySelector('h2, h3, h4, h5');
          if (!heading) return;
          const id = heading.getAttribute('id');
          const tocLink = document.querySelector(`.toc a[href="#${id}"]`);
          if (!tocLink) return;

          if (entry.intersectionRatio > 0) {
            tocLink.classList.add('active');
          } else {
            tocLink.classList.remove('active');
          }
        });
      },
      {
        rootMargin: '-10% 0px -5% 0px',
      }
    );

    document.querySelectorAll('article section').forEach((section) => {
      observer.observe(section);
    });
  });
</script>
