---
interface Link {
  name: string;
  url: string;
}

interface Props {
  name: string;
  links: Link[];
  showCaret: boolean;
  icon: boolean;
}

const {
  name = 'Dropdown',
  links = [],
  showCaret = false,
  icon = false,
} = Astro.props;
import Button from './Button.astro';
---

<div class="dropdown relative">
  <Button
    name={name}
    class="dropdown-button"
    showCaret={showCaret}
    icon={icon}
  />
  <div
    class="dropdown-content dark:bg-dark-slate absolute mt-1 hidden text-balance rounded-md bg-slate-100 p-[0.5px] backdrop-blur-md sm:ml-2 md:w-40">
    {
      links.map((link) => (
        <a
          href={link.url}
          class="dark:hover:text-dark/95 hover:bg-accent-highlight/75 m-1 block rounded-md px-2 py-2 text-sm text-slate-800 transition-colors duration-200 dark:text-slate-300/80 dark:hover:bg-sky-600">
          {link.name}
        </a>
      ))
    }
  </div>
</div>

<script>
  const dropdowns = document.querySelectorAll('.dropdown');

  dropdowns.forEach((dropdown) => {
    const button = dropdown.querySelector('.dropdown-button');
    const content = dropdown.querySelector('.dropdown-content');

    if (button && content) {
      button.addEventListener('click', (event) => {
        content.classList.toggle('hidden');
        button.classList.toggle('dropdown-active');
        event.stopPropagation();
      });

      document.addEventListener('click', (event) => {
        if (!dropdown.contains(event.target as Node)) {
          button.classList.remove('dropdown-active');
          content.classList.add('hidden');
        }
      });
    }
  });
</script>
