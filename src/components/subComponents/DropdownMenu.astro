---
interface Link {
  name: string;
  url: string;
}

interface Props {
  name: string;
  links: Link[];
  showCaret?: boolean;
  icon?: boolean;
  dropdownType?: 'desktop' | 'mobile';
}

const { name = 'Dropdown', links = [], showCaret = false, icon = false, dropdownType = 'desktop' } = Astro.props;
import Button from './Button.astro';
---

<div class="relative">
  <Button name={name} data-dropdown-type={dropdownType} showCaret={showCaret} icon={icon} /> 
  <div
    data-dropdown={dropdownType}
    class="absolute mt-1 hidden text-balance rounded-md bg-slate-200/50 p-[0.5px] backdrop-blur-md sm:ml-2 md:w-40 dark:bg-slate-800">
    {
      links.map((link) => (
        <a
          href={link.url}
          class="m-1 block rounded-md px-2 py-2 text-sm text-slate-800 transition-colors duration-200 hover:bg-sky-300/75 dark:text-slate-300/80 dark:hover:bg-sky-600 dark:hover:text-slate-200/95">
          {link.name}
        </a>
      ))
    }
  </div>
</div>

<script>
document.querySelectorAll('[data-dropdown-type]').forEach(button => {
  button.addEventListener('click', (event) => {
    const dropdownType = button.getAttribute('data-dropdown-type');
    const dropdown = document.querySelector(`[data-dropdown="${dropdownType}"]`);
    
    if (window.matchMedia('(min-width: 640px)').matches && dropdownType === 'mobile') {
      return; // Skip for mobile dropdown on desktop view
    }

    if (window.matchMedia('(max-width: 639px)').matches && dropdownType === 'desktop') {
      return; // Skip for desktop dropdown on mobile view
    }
    
    dropdown.classList.toggle('hidden');
    button.classList.toggle('dropdown-active');
    event.stopPropagation();
  });
});

document.addEventListener('click', (event) => {
    document.querySelectorAll('[data-dropdown]').forEach(dropdown => {
      dropdown.classList.add('hidden');
    });
  }
);
</script>
